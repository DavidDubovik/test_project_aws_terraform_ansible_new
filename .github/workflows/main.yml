name: Terraform CI/CD

on:
  workflow_dispatch:
    inputs:
      ami:
        description: 'AMI ID для EC2 (наприклад, ami-0c55b159cbfafe1f0)'
        type: string
        required: true
        default: 'ami-07e075f00c26b085a'
      instance_type:
        description: 'Тип EC2 інстансу'
        type: choice
        options:
        - t3.micro
        - t3.medium
        - t3.large
        required: true
        default: 't3.micro'
      region:
        description: 'AWS регіон'
        type: choice
        options:
        - eu-north-1
        - eu-west-1
        - ap-south-1
        required: true
        default: 'eu-north-1'

jobs:
  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ github.event.inputs.region }}

    - name: Terraform Init with S3 Backend
      run: terraform init -backend-config="bucket=salodoxerabucket" -backend-config="key=terraform.tfstate" -backend-config="region=${{ github.event.inputs.region }}"
      # Замініть "my-terraform-state-bucket" на назву вашого S3 bucket
    - name: Check if instance exists and get data from S3
      id: check_instance
      run: |
        if terraform state show aws_instance.my_project; then
          # Витягти дані з стану з S3
          AMI=$(terraform state show aws_instance.my_project | grep 'ami' | awk '{print $3}' | tr -d '"')
          INSTANCE_TYPE=$(terraform state show aws_instance.my_project | grep 'instance_type' | awk '{print $3}' | tr -d '"')
          
          # Використати регіон із вхідних даних або S3, якщо доступно
          REGION=${{ github.event.inputs.region }}
          
          echo "Extracted AMI: $AMI"
          echo "Extracted INSTANCE_TYPE: $INSTANCE_TYPE"
          echo "Extracted REGION: $REGION"
          
          echo "instance_exists=true" >> $GITHUB_OUTPUT
          echo "extracted_ami=$AMI" >> $GITHUB_OUTPUT
          echo "extracted_instance_type=$INSTANCE_TYPE" >> $GITHUB_OUTPUT
          echo "extracted_region=$REGION" >> $GITHUB_OUTPUT
          
          # Видалити інстанс із витягнутими даними
          terraform destroy -auto-approve -var="ami=$AMI" -var="instance_type=$INSTANCE_TYPE" -var="region=$REGION"
        else
          echo "Інстанса не створений" 
        fi

    - name: Terraform Plan
      id: plan
      if: steps.plan.outcome == 'success'
      # if: steps.check_instance.outputs.instance_exists == 'false'
      run: terraform plan -var="ami=${{ github.event.inputs.ami }}" -var="instance_type=${{ github.event.inputs.instance_type }}" -var="region=${{ github.event.inputs.region }}" -out=plan.tfout

    - name: Terraform Apply
      id: apply
      # if: steps.check_instance.outputs.instance_exists == 'false'
      if: steps.check_instance.outcome == 'success'
      run: terraform apply -auto-approve plan.tfout

    - name: Terraform Destroy
      if: steps.plan.outcome == 'success'
      # if: github.event_name == 'workflow_dispatch'
      run: terraform destroy -auto-approve -var="ami=${{ github.event.inputs.ami }}" -var="instance_type=${{ github.event.inputs.instance_type }}" -var="region=${{ github.event.inputs.region }}"