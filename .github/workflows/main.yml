name: Terraform CI/CD

on:
  workflow_dispatch:
    inputs:
      ami:
        description: 'AMI ID для EC2 (наприклад, ami-0c55b159cbfafe1f0)'
        type: string
        required: true
        default: 'ami-07e075f00c26b085a'
      instance_type:
        description: 'Тип EC2 інстансу'
        type: choice
        options:
        - t3.micro
        - t3.medium
        - t3.large
        required: true
        default: 't3.micro'
      region:
        description: 'AWS регіон'
        type: choice
        options:
        - eu-north-1
        - eu-west-1
        - ap-south-1
        required: true
        default: 'eu-north-1'
      auto_apply:
        description: 'Автоматично виконати terraform apply?'
        type: boolean
        default: false

env:
  S3_BUCKET: 'your-actual-s3-bucket-name' # Замініть на реальне ім’я вашого S3 бакета
  TF_STATE_KEY: 'terraform.tfstate' # Шлях до файлу стану в S3

jobs:
  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform # Змінити, якщо Terraform-файли в іншій директорії

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ github.event.inputs.region }}
        # Видалено audience, оскільки використовуються статичні credentials

    - name: Terraform Init
      run: terraform init

    - name: Terraform Format
      run: terraform fmt -check

    - name: Check and Manage EC2 Instance
      id: check_instance
      run: |
        if aws s3 ls s3://${{ env.S3_BUCKET }}/${{ env.TF_STATE_KEY }}; then
          terraform state pull > terraform.tfstate
          INSTANCE_ID=$(terraform state show aws_instance.example 2>/dev/null | grep -E "^id" | awk '{print $3}' || echo "")
          if [ -n "$INSTANCE_ID" ]; then
            echo "Instance exists with ID: $INSTANCE_ID. Destroying..."
            terraform destroy -auto-approve -var="ami=${{ github.event.inputs.ami }}" -var="instance_type=${{ github.event.inputs.instance_type }}"
            echo "Recreating instance..."
            terraform apply -auto-approve -var="ami=${{ github.event.inputs.ami }}" -var="instance_type=${{ github.event.inputs.instance_type }}"
          else
            echo "Instance does not exist. Creating..."
            terraform apply -auto-approve -var="ami=${{ github.event.inputs.ami }}" -var="instance_type=${{ github.event.inputs.instance_type }}"
          fi
        else
          echo "Terraform state file does not exist in S3. Creating new instance..."
          terraform apply -auto-approve -var="ami=${{ github.event.inputs.ami }}" -var="instance_type=${{ github.event.inputs.instance_type }}"
        fi
      shell: bash

    - name: Terraform Plan
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.auto_apply == 'false'
      run: terraform plan -out=plan.tfout

    - name: Terraform Apply
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.auto_apply == 'true'
      run: terraform apply -auto-approve